services:
  discovery-server:
    build:
      context: .
      dockerfile: ./infra/discovery-server/Dockerfile
    container_name: discovery-server
    hostname: discovery-server
    ports:
      - "8761:8761"
    environment:
      EUREKA_HOSTNAME: discovery-server
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  kafka:
    image: confluentinc/confluent-local:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092" # for client connections
      - "9101:9101" # JMX
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      CLUSTER_ID: 'K0EA9p0yEe6MkAAAAkKsEg'
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 3s

  kafka-init-topics:
    image: confluentinc/confluent-local:7.5.0
    container_name: kafka-init-topics
    depends_on:
      kafka:
          condition: service_healthy
    command: "bash -c \
                'echo Kafka is healthy, creating topics... && \
                kafka-topics --create --topic telemetry.sensors.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092 && \
                kafka-topics --create --topic telemetry.snapshots.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092 && \
                kafka-topics --create --topic telemetry.hubs.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092'"
    init: true

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 3s

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: smart_home_tech
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d smart_home_tech" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 2s

  config-server:
    build:
      context: .
      dockerfile: ./infra/config-server/Dockerfile
    container_name: config-server
    depends_on:
      discovery-server:
        condition: service_healthy
    ports:
      - "8888:8888"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    environment:
      EUREKA_URI: http://discovery-server:8761/eureka/
      PORT: 8888

  collector-service:
      build:
        context: .
        dockerfile: ./telemetry/collector/Dockerfile
      container_name: collector-service
      depends_on:
        kafka:
          condition: service_healthy
        config-server:
          condition: service_healthy
      ports:
        - "9090:9090"
        - "9091:9091"
      restart: unless-stopped
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:9091/actuator/health || exit 1" ]
        interval: 5s
        timeout: 3s
        retries: 5
        start_period: 5s
      environment:
        EUREKA_URI: http://discovery-server:8761/eureka/
        KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  aggregator-service:
      build:
        context: .
        dockerfile: ./telemetry/aggregator/Dockerfile
      container_name: aggregator-service
      depends_on:
        kafka:
          condition: service_healthy
        config-server:
          condition: service_healthy
      ports:
        - "8080:8080"
      restart: unless-stopped
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
        interval: 5s
        timeout: 3s
        retries: 5
        start_period: 5s
      environment:
        EUREKA_URI: http://discovery-server:8761/eureka/
        KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  analyzer-service:
      build:
        context: .
        dockerfile: ./telemetry/analyzer/Dockerfile
      container_name: analyzer-service
      depends_on:
        kafka:
          condition: service_healthy
        postgres:
          condition: service_healthy
        config-server:
          condition: service_healthy
      ports:
        - "8082:8082"
      restart: unless-stopped
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
        interval: 5s
        timeout: 3s
        retries: 5
        start_period: 5s
      environment:
        EUREKA_URI: http://discovery-server:8761/eureka/
        DATASOURCE_URL: jdbc:postgresql://postgres:5432/smart_home_tech
        DATASOURCE_USERNAME: analyzer_user
        DATASOURCE_PASSWORD: analyzer_password
        KAFKA_BOOTSTRAP_SERVERS: kafka:29092